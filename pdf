/**
 * Mintlify: Contextual Menu → "Export to PDF"
 * - Add in docs.json: contextual.options -> { "title": "Export to PDF", "icon": "download", "description": "Download one or many articles as a PDF", "href": "#export-pdf" }
 * - Paste this script in Custom JavaScript (site-wide)
 */
(function () {
  if (window.__PDFX_LOADED__) return; // guard against double init
  window.__PDFX_LOADED__ = true;

  // -------------------------
  // Helpers
  // -------------------------
  const $ = (s, r = document) => r.querySelector(s);
  const $$ = (s, r = document) => Array.from(r.querySelectorAll(s));
  const slug = (s='') => s.trim().toLowerCase().replace(/[^\w\-]+/g, '-').replace(/-+/g, '-').replace(/^-|-$/g,'');

  function findArticle(root = document) {
    return root.querySelector('main article, main [data-content], main .prose, main') || root.body || root;
  }

  function loadHtml2Pdf() {
    return new Promise((resolve, reject) => {
      if (window.html2pdf) return resolve();
      const s = document.createElement('script');
      s.src = 'https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js';
      s.async = true;
      s.onload = resolve;
      s.onerror = () => reject(new Error('Failed to load html2pdf'));
      document.head.appendChild(s);
    });
  }

  // -------------------------
  // Modal UI
  // -------------------------
  const MODAL_HTML = `
  <style id="pdfx-styles">
    .pdfx-overlay{position:fixed;inset:0;background:rgba(0,0,0,.35);backdrop-filter:saturate(1.2) blur(2px);z-index:9999;display:block}
    .pdfx-overlay[hidden]{display:none}
    .pdfx-modal{position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);width:min(920px,92vw);max-height:80vh;background:#fff;border-radius:12px;box-shadow:0 16px 60px rgba(0,0,0,.25);overflow:hidden}
    .pdfx-close{position:absolute;right:10px;top:10px;border:0;background:transparent;font-size:18px;cursor:pointer}
    .pdfx-grid{display:grid;grid-template-columns:1.2fr 1fr;gap:0;border-top:1px solid rgba(0,0,0,.06)}
    .pdfx-left{padding:14px;border-right:1px solid rgba(0,0,0,.06);display:flex;flex-direction:column;min-height:380px}
    .pdfx-right{padding:14px;display:flex;flex-direction:column;justify-content:space-between}
    .pdfx-search-wrap{padding:4px 4px 10px 4px}
    .pdfx-search{width:100%;padding:10px 12px;border-radius:8px;border:1px solid rgba(0,0,0,.12)}
    .pdfx-list{overflow:auto;border:1px solid rgba(0,0,0,.06);border-radius:8px;padding:8px;background:#fafafa;min-height:260px}
    .pdfx-row{display:grid;grid-template-columns:auto 1fr auto;gap:8px;align-items:center;padding:6px 8px;border-radius:8px}
    .pdfx-row:hover{background:#fff}
    .pdfx-title{font-weight:500}
    .pdfx-path{opacity:.6;font-size:12px}
    .pdfx-footer-left{display:flex;justify-content:space-between;align-items:center;padding-top:8px;font-size:12px}
    .pdfx-check{display:flex;gap:6px;align-items:center}
    .pdfx-opts{display:flex;gap:12px;align-items:center;flex-wrap:wrap;margin:4px 0 12px}
    .pdfx-label{font-size:12px;opacity:.7}
    .pdfx-actions{display:flex;justify-content:flex-end;gap:8px}
    .pdfx-actions .pdfx-cancel,.pdfx-actions .pdfx-export{padding:10px 14px;border-radius:10px;border:1px solid rgba(0,0,0,.12);cursor:pointer;background:#fff}
    .pdfx-actions .pdfx-export{background:#e84e2c;color:#fff;border-color:#e84e2c}
    .pdfx-preview-hint{opacity:.65;font-size:12px;margin-top:6px}
    .pdfx-article-header{border-bottom:1px solid rgba(0,0,0,.08);padding-bottom:10px;margin-bottom:12px}
    .pdfx-article-title{margin:0;font-size:20px}
    .pdfx-article-path{opacity:.55;font-size:12px}
    @media print { .html2pdf__page-break{break-after:page} }
  </style>
  <div id="pdfx-overlay" class="pdfx-overlay" hidden>
    <div class="pdfx-modal" role="dialog" aria-modal="true" aria-label="Export articles">
      <button class="pdfx-close" aria-label="Close">✕</button>
      <div class="pdfx-grid">
        <aside class="pdfx-left">
          <div class="pdfx-search-wrap">
            <input type="text" class="pdfx-search" placeholder="Search for category & article" />
          </div>
          <div class="pdfx-list"></div>
          <div class="pdfx-footer-left">
            <label class="pdfx-check"><input type="checkbox" id="pdfx-select-all"/> Select all</label>
            <span class="pdfx-count">0 article(s) selected</span>
          </div>
        </aside>
        <section class="pdfx-right">
          <div class="pdfx-opts">
            <label class="pdfx-label">Paper</label>
            <select class="pdfx-paper">
              <option value="a4|portrait" selected>A4 • Portrait</option>
              <option value="a4|landscape">A4 • Landscape</option>
              <option value="letter|portrait">US Letter • Portrait</option>
              <option value="letter|landscape">US Letter • Landscape</option>
            </select>
            <label class="pdfx-label">Quality</label>
            <select class="pdfx-quality">
              <option value="0.98" selected>High</option>
              <option value="0.9">Medium</option>
              <option value="0.8">Small file</option>
            </select>
          </div>
          <div class="pdfx-preview-hint">Pages are compiled in the order they appear in the sidebar.</div>
          <div class="pdfx-actions">
            <button class="pdfx-cancel">Cancel</button>
            <button class="pdfx-export">Export PDF</button>
          </div>
        </section>
      </div>
    </div>
  </div>`;

  function ensureModal() {
    if (!document.getElementById('pdfx-overlay')) {
      const frag = document.createElement('div');
      frag.innerHTML = MODAL_HTML;
      // styles + overlay
      document.body.appendChild(frag.firstElementChild); // <style>
      document.body.appendChild(frag.lastElementChild);  // <div id="pdfx-overlay">
    }
  }
  function openModal() {
    ensureModal();
    document.getElementById('pdfx-overlay').hidden = false;
    buildList();
  }
  function closeModal() {
    const ov = document.getElementById('pdfx-overlay');
    if (ov) ov.hidden = true;
  }

  // -------------------------
  // Build selectable list (reads your left nav)
  // -------------------------
  function readSidebar() {
    const links = $$('aside a[href^="/"]:not([href="#"])');
    const seen = new Set();
    const items = [];
    links.forEach(a => {
      const href = a.getAttribute('href');
      try {
        const u = new URL(href, location.origin);
        if (seen.has(u.pathname)) return;
        seen.add(u.pathname);
        const title = (a.textContent || '').trim() || u.pathname.split('/').filter(Boolean).pop();
        items.push({ title, path: u.pathname });
      } catch {}
    });
    return items;
  }

  let cachedItems = [];
  function buildList() {
    cachedItems = readSidebar();
    const list = $('.pdfx-list');
    if (!list) return;
    list.innerHTML = cachedItems.map(it => `
      <label class="pdfx-row">
        <input type="checkbox" class="pdfx-item" data-path="${it.path}" data-title="${it.title.replace(/"/g,'&quot;')}" />
        <span class="pdfx-title">${it.title}</span>
        <span class="pdfx-path">${it.path}</span>
      </label>
    `).join('');
    updateCount();
  }
  function updateCount() {
    const n = $$('.pdfx-item:checked').length;
    const el = $('.pdfx-count'); if (el) el.textContent = `${n} article(s) selected`;
  }

  // -------------------------
  // Fetch + compile + export
  // -------------------------
  async function fetchArticle(pathname) {
    const res = await fetch(pathname, { credentials: 'same-origin' });
    const html = await res.text();
    const doc = new DOMParser().parseFromString(html, 'text/html');
    const main = findArticle(doc).cloneNode(true);

    // Remove interactive bits that can ruin layout
    main.querySelectorAll('button, [role="button"], .no-print, .copy, .clipboard, .code-action, [data-rehype-pretty-code-title]')
        .forEach(n => n.remove());
    return main;
  }

  async function doExport() {
    await loadHtml2Pdf();
    const selected = $$('.pdfx-item:checked').map(cb => ({
      title: cb.dataset.title, path: cb.dataset.path
    }));
    if (!selected.length) return alert('Select at least one article.');

    const [format, orientation] = ($('.pdfx-paper').value || 'a4|portrait').split('|');
    const quality = parseFloat($('.pdfx-quality').value || '0.98');

    const wrap = document.createElement('div');
    wrap.className = 'pdfx-wrap';

    for (let i = 0; i < selected.length; i++) {
      const { title, path } = selected[i];
      const section = document.createElement('section');
      section.className = 'pdfx-article';

      const header = document.createElement('header');
      header.className = 'pdfx-article-header';
      header.innerHTML = `<h1 class="pdfx-article-title">${title}</h1>
                          <div class="pdfx-article-path">${location.origin}${path}</div>`;
      section.appendChild(header);

      const body = await fetchArticle(path);
      section.appendChild(body);
      wrap.appendChild(section);

      if (i < selected.length - 1) {
        const br = document.createElement('div');
        br.className = 'html2pdf__page-break';
        wrap.appendChild(br);
      }
    }

    const fname = `blockaid-docs_${slug(selected[0].title)}${selected.length>1?`-and-${selected.length-1}-more`:''}.pdf`;

    const options = {
      margin: [10, 12, 14, 12],
      filename: fname,
      image: { type: 'jpeg', quality: quality },
      html2canvas: { scale: 2, useCORS: true, scrollY: 0 },
      jsPDF: { unit: 'mm', format: format, orientation: orientation },
      pagebreak: { mode: ['css', 'legacy'] }
    };

    await window.html2pdf().set(options).from(wrap).save();
    closeModal();
  }

  // -------------------------
  // URL-trigger wiring (works with contextual menu)
  // -------------------------
  function openExportModalFromUrl() {
    try {
      const url = new URL(location.href);
      const isHash = url.hash === '#export-pdf';
      const isQuery = url.searchParams.get('export') === 'pdf';
      if (isHash || isQuery) {
        // Clean the URL so back/refresh doesn't reopen it
        history.replaceState(null, '', location.pathname + (isQuery ? '' : url.search));
        openModal();
      }
    } catch {}
  }

  // -------------------------
  // Modal event handlers
  // -------------------------
  function attachModalEvents() {
    const ov = document.getElementById('pdfx-overlay');
    if (!ov) return;

    ov.addEventListener('click', (e) => {
      if (e.target === ov) closeModal();
      if (e.target.matches('.pdfx-close, .pdfx-cancel')) closeModal();
    });

    ov.addEventListener('input', (e) => {
      if (e.target.matches('.pdfx-search')) {
        const q = e.target.value.trim().toLowerCase();
        $$('.pdfx-row').forEach(row => {
          const t = row.querySelector('.pdfx-title').textContent.toLowerCase();
          const p = row.querySelector('.pdfx-path').textContent.toLowerCase();
          row.hidden = !(t.includes(q) || p.includes(q));
        });
      }
      if (e.target.matches('#pdfx-select-all')) {
        const checked = e.target.checked;
        $$('.pdfx-item:not(:disabled)').forEach(cb => (cb.checked = checked));
        updateCount();
      }
      if (e.target.matches('.pdfx-item')) updateCount();
    });

    ov.addEventListener('click', async (e) => {
      if (e.target.matches('.pdfx-export')) {
        e.preventDefault();
        try { await doExport(); }
        catch (err) { alert('Export failed: ' + (err?.message || err)); }
      }
    });
  }

  // -------------------------
  // Boot
  // -------------------------
  function ready(fn){
    (document.readyState === 'complete' || document.readyState === 'interactive')
      ? fn()
      : document.addEventListener('DOMContentLoaded', fn, { once: true });
  }

  ready(() => {
    ensureModal();
    attachModalEvents();

    // 1) Fire if page *loads* with trigger in URL
    openExportModalFromUrl();

    // 2) Fire when contextual item changes the hash/query
    window.addEventListener('hashchange', openExportModalFromUrl);
    window.addEventListener('popstate', openExportModalFromUrl);

    // 3) On SPA navigations (Mintlify client routing), rebuild list
    const navObserver = new MutationObserver(() => {
      if ($('#pdfx-overlay') && !$('#pdfx-overlay').hidden) buildList();
    });
    navObserver.observe(document.body, { childList: true, subtree: true });
  });
})();
